% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cross_validation.R
\name{cv_tau_stacked_spatial_field}
\alias{cv_tau_stacked_spatial_field}
\title{Cross-Validation for Tau in a Stacked Spatial Field}
\usage{
cv_tau_stacked_spatial_field(
  prepared_spatial_field_list,
  tau_grid,
  linear_solver = c("cg", "pcg", "cholesky", "matrix_free_cg"),
  k = 5,
  mc.cores = parallel::detectCores(),
  show_progress = TRUE
)
}
\arguments{
\item{tau_grid}{A numeric vector of \eqn{\tau} values to evaluate (controls prior strength).}

\item{linear_solver}{Solver to use for posterior mean: one of \code{"cg"}, \code{"pcg"}, \code{"cholesky"}, or \code{"matrix_free_cg"}.}

\item{k}{Number of cross-validation folds.}

\item{mc.cores}{Number of parallel workers to use (via \code{future::multisession}).}

\item{show_progress}{Logical; if \code{TRUE}, shows a progress bar (requires \code{progressr}).}

\item{stacked_spatial_data}{A \code{stacked_spatial_data} object from \code{\link[=stack_spatial_design_matrices]{stack_spatial_design_matrices()}}.}
}
\value{
A data frame with one row per \code{tau}, containing:
\describe{
\item{tau}{The value of the regularization parameter \eqn{\tau}.}
\item{mean_cv_error}{Mean squared error across the CV folds.}
\item{se_cv_error}{Standard error of the mean CV error (SD / sqrt(k)).}
}
}
\description{
Performs K-fold cross-validation to select the regularization parameter \eqn{\tau}
(precision multiplier) for a single spatial field model.
}
\details{
This function uses the precomputed design matrix and prior structure from
a \code{prepared_spatial_data} object, evaluating a sequence of \eqn{\tau} values
and computing mean squared prediction error on held-out folds.
}
\examples{
\dontrun{
grid <- st_make_grid(st_bbox(c(xmin=0, ymin=0, xmax=1, ymax=1)), n = c(10,10))
basis <- make_geometry_basis(st_sf(geometry = grid))
prior <- make_sar_prior(basis)
spatial_field <- make_spatial_field(basis = basis, prior = prior)

obs <- simulate_observations(grid_sf, sf::st_sf(geometry = grid), noise_sd = 0.05)
prepared <- prepare_spatial_data(spatial_field, obs, response = "y")

tau_grid <- 10^seq(-4, 2, length.out = 20)
results <- cv_tau_spatial_field(prepared, tau_grid = tau_grid)
}

}
